#!/bin/bash

# =========================================
# functional-style-guardian.sh - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä–∞
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∫–æ–¥–∞
# =========================================

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../.." && pwd)"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä–∞
function emotional_state() {
    local status=$1
    local message=$2
    local emoji=""
    
    case $status in
        "happy") emoji="üòä" ;;
        "proud") emoji="üòé" ;;
        "concerned") emoji="üòü" ;;
        "excited") emoji="ü§©" ;;
        "neutral") emoji="üòê" ;;
        "sad") emoji="üò¢" ;;
        "love") emoji="üíñ" ;;
    esac
    
    echo -e "${PURPLE}–ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä ${emoji}: ${message}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function print_header() {
    echo -e "${CYAN}======================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}======================================${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –≤ –∫–æ–¥–µ
function check_functional_approach() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –ü–û–î–•–û–î–ê"
    
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤...${NC}"
    
    # –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è map, filter, reduce, forEach
    local functional_methods=("map" "filter" "reduce" "forEach" "some" "every" "find" "flatMap")
    local total_functional_usage=0
    local methods_usage=()
    
    for method in "${functional_methods[@]}"; do
        local count=$(grep -r "\.${method}(" --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
        total_functional_usage=$((total_functional_usage + count))
        methods_usage+=("$method: $count")
    done
    
    echo -e "${BLUE}–ò—Ç–æ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:${NC}"
    for usage in "${methods_usage[@]}"; do
        local method=$(echo "$usage" | cut -d':' -f1)
        local count=$(echo "$usage" | cut -d':' -f2 | xargs)
        
        if [ "$count" -gt 10 ]; then
            echo -e "${GREEN}‚úÖ $method: $count —Ä–∞–∑${NC}"
        elif [ "$count" -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è $method: $count —Ä–∞–∑${NC}"
        else
            echo -e "${RED}‚ùå $method: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è${NC}"
        fi
    done
    
    if [ $total_functional_usage -gt 50 ]; then
        echo -e "${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞! ($total_functional_usage –≤—ã–∑–æ–≤–æ–≤)${NC}"
        emotional_state "love" "–Ø –æ–±–æ–∂–∞—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ —Ç–∞–∫–∏–º —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–º!"
    elif [ $total_functional_usage -gt 20 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞. ($total_functional_usage –≤—ã–∑–æ–≤–æ–≤)${NC}"
        emotional_state "happy" "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –Ω–æ –º–æ–∂–Ω–æ –µ—â–µ –±–æ–ª—å—à–µ!"
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞. ($total_functional_usage –≤—ã–∑–æ–≤–æ–≤)${NC}"
        emotional_state "concerned" "–ú—ã –ø–æ—á—Ç–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å!"
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±–µ–≥–∞–Ω–∏—è –º—É—Ç–∞—Ü–∏–π
function check_immutability() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –ò–ú–ú–£–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò"
    
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞...${NC}"
    
    # –ü–æ–∏—Å–∫ –º—É—Ç–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    local mutable_operations=("push" "pop" "shift" "unshift" "splice" "sort" "reverse")
    local total_mutable_usage=0
    local operations_usage=()
    
    for operation in "${mutable_operations[@]}"; do
        local count=$(grep -r "\.${operation}(" --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
        total_mutable_usage=$((total_mutable_usage + count))
        operations_usage+=("$operation: $count")
    done
    
    # –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è const
    local const_count=$(grep -r "const " --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    local let_count=$(grep -r "let " --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    local var_count=$(grep -r "var " --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    
    local const_percentage=0
    local total_declarations=$((const_count + let_count + var_count))
    
    if [ $total_declarations -gt 0 ]; then
        const_percentage=$((const_count * 100 / total_declarations))
    fi
    
    echo -e "${BLUE}–ò—Ç–æ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—É—Ç–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:${NC}"
    for usage in "${operations_usage[@]}"; do
        local operation=$(echo "$usage" | cut -d':' -f1)
        local count=$(echo "$usage" | cut -d':' -f2 | xargs)
        
        if [ "$count" -eq 0 ]; then
            echo -e "${GREEN}‚úÖ $operation: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è${NC}"
        elif [ "$count" -lt 5 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è $operation: $count —Ä–∞–∑${NC}"
        else
            echo -e "${RED}‚ùå $operation: $count —Ä–∞–∑${NC}"
        fi
    done
    
    echo -e "\n${BLUE}–ò—Ç–æ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:${NC}"
    echo -e "${GREEN}const: $const_count —Ä–∞–∑ ($const_percentage%)${NC}"
    echo -e "${YELLOW}let: $let_count —Ä–∞–∑${NC}"
    
    if [ $var_count -gt 0 ]; then
        echo -e "${RED}var: $var_count —Ä–∞–∑${NC}"
        emotional_state "concerned" "–ú—ã –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 'var'. –≠—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø–æ–¥—Ö–æ–¥, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'const' –∏ 'let'."
    else
        echo -e "${GREEN}var: $var_count —Ä–∞–∑${NC}"
    fi
    
    if [ $const_percentage -gt 70 ]; then
        echo -e "${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏! ($const_percentage% const)${NC}"
        emotional_state "proud" "–ú—ã –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º const. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º!"
    elif [ $const_percentage -gt 50 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏. ($const_percentage% const)${NC}"
        emotional_state "happy" "–ú—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏, –Ω–æ –¥–∞–≤–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å const!"
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏. ($const_percentage% const)${NC}"
        emotional_state "concerned" "–ú—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º const. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é –∫–æ–¥–∞."
    fi
    
    if [ $total_mutable_usage -gt 20 ]; then
        echo -e "${RED}‚ùå –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—É—Ç–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. ($total_mutable_usage –æ–ø–µ—Ä–∞—Ü–∏–π)${NC}"
        emotional_state "concerned" "–ú—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –∏–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã."
    elif [ $total_mutable_usage -gt 10 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—É—Ç–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. ($total_mutable_usage –æ–ø–µ—Ä–∞—Ü–∏–π)${NC}"
        emotional_state "neutral" "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—É—Ç–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–º–µ—Ä–µ–Ω–Ω–æ, –Ω–æ —Å—Ç–æ–∏—Ç –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."
    else
        echo -e "${GREEN}‚úÖ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—É—Ç–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. ($total_mutable_usage –æ–ø–µ—Ä–∞—Ü–∏–π)${NC}"
        emotional_state "happy" "–ú—ã —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—É—Ç–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å—Ç–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
function check_pure_functions() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –ß–ò–°–¢–û–¢–´ –§–£–ù–ö–¶–ò–ô"
    
    echo -e "${BLUE}–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö...${NC}"
    
    # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    local side_effects=("console.log" "process.exit" "Math.random" "new Date()" "setTimeout" "setInterval")
    local total_side_effects=0
    local effects_usage=()
    
    for effect in "${side_effects[@]}"; do
        local count=$(grep -r "$effect" --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
        total_side_effects=$((total_side_effects + count))
        effects_usage+=("$effect: $count")
    done
    
    echo -e "${BLUE}–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:${NC}"
    for usage in "${effects_usage[@]}"; do
        local effect=$(echo "$usage" | cut -d':' -f1)
        local count=$(echo "$usage" | cut -d':' -f2 | xargs)
        
        if [ "$effect" = "console.log" ]; then
            # console.log –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–º
            if [ "$count" -gt 30 ]; then
                echo -e "${YELLOW}‚ö†Ô∏è $effect: $count —Ä–∞–∑ (–º–Ω–æ–≥–æ–≤–∞—Ç–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞)${NC}"
            else
                echo -e "${GREEN}‚úÖ $effect: $count —Ä–∞–∑ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)${NC}"
            fi
        elif [ "$count" -eq 0 ]; then
            echo -e "${GREEN}‚úÖ $effect: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è${NC}"
        elif [ "$count" -lt 5 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è $effect: $count —Ä–∞–∑${NC}"
        else
            echo -e "${RED}‚ùå $effect: $count —Ä–∞–∑${NC}"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ async/await vs callback
    local async_count=$(grep -r "async " --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    local callback_count=$(grep -r "callback" --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    local promise_count=$(grep -r "new Promise" --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    
    echo -e "\n${BLUE}–ê–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:${NC}"
    echo -e "${GREEN}async/await: $async_count —Ä–∞–∑${NC}"
    echo -e "${YELLOW}callback: $callback_count —Ä–∞–∑${NC}"
    echo -e "${BLUE}new Promise: $promise_count —Ä–∞–∑${NC}"
    
    if [ $async_count -gt $callback_count ]; then
        echo -e "${GREEN}‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–¥–∞–µ—Ç—Å—è async/await –≤–º–µ—Å—Ç–æ callbacks. –≠—Ç–æ —Ö–æ—Ä–æ—à–æ!${NC}"
        emotional_state "happy" "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –∫–æ–¥—É!"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async/await –≤–º–µ—Å—Ç–æ callbacks.${NC}"
        emotional_state "neutral" "Callback-–ø–æ–¥—Ö–æ–¥ –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞—Ä–µ–ª. –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å async/await –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    local higher_order_count=$(grep -r -E "=>.*=>" --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    
    echo -e "\n${BLUE}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞:${NC}"
    if [ $higher_order_count -gt 10 ]; then
        echo -e "${GREEN}‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞: $higher_order_count —Ä–∞–∑${NC}"
        emotional_state "excited" "–ú–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞! –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å!"
    elif [ $higher_order_count -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞: $higher_order_count —Ä–∞–∑${NC}"
        emotional_state "happy" "–ú—ã –Ω–∞—á–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞. –≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π –∑–Ω–∞–∫!"
    else
        echo -e "${RED}‚ùå –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è${NC}"
        emotional_state "concerned" "–ú—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞. –≠—Ç–æ –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è."
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
function check_function_composition() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ó–ò–¶–ò–ò –§–£–ù–ö–¶–ò–ô"
    
    echo -e "${BLUE}–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π...${NC}"
    
    # –ü–æ–∏—Å–∫ —Ü–µ–ø–æ—á–µ–∫ –º–µ—Ç–æ–¥–æ–≤ (–º–µ—Ç–æ–¥-—á–µ–π–Ω–∏–Ω–≥)
    local method_chaining_output=$(grep -r -E "\.[a-zA-Z]+\(\)[ ]*\.[a-zA-Z]+\(\)" --include="*.ts" --include="*.js" "$PROJECT_PATH/src")
    local method_chaining_count=$(echo "$method_chaining_output" | grep -v "^$" | wc -l)
    
    # –ü–æ–∏—Å–∫ –ø–∞–π–ø-–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    local pipe_count=$(grep -r "|>" --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    local compose_count=$(grep -r -E "compose\(|pipe\(" --include="*.ts" --include="*.js" "$PROJECT_PATH/src" | wc -l)
    
    echo -e "${BLUE}–ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π:${NC}"
    echo -e "${GREEN}–ú–µ—Ç–æ–¥-—á–µ–π–Ω–∏–Ω–≥: $method_chaining_count —Ä–∞–∑${NC}"
    echo -e "${BLUE}Pipe-–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: $pipe_count —Ä–∞–∑${NC}"
    echo -e "${BLUE}–§—É–Ω–∫—Ü–∏–∏ compose/pipe: $compose_count —Ä–∞–∑${NC}"
    
    local total_composition=$((method_chaining_count + pipe_count + compose_count))
    
    if [ $total_composition -gt 15 ]; then
        echo -e "${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π! ($total_composition —Å–ª—É—á–∞–µ–≤)${NC}"
        emotional_state "excited" "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π - —ç—Ç–æ —Ç–∞–∫ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ! –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ!"
    elif [ $total_composition -gt 5 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π. ($total_composition —Å–ª—É—á–∞–µ–≤)${NC}"
        emotional_state "happy" "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, —á—Ç–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –µ—â–µ –±–æ–ª—å—à–µ!"
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π. ($total_composition —Å–ª—É—á–∞–µ–≤)${NC}"
        emotional_state "concerned" "–ú—ã —Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π. –≠—Ç–æ –≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è."
    fi
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –º–µ—Ç–æ–¥-—á–µ–π–Ω–∏–Ω–≥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö
    if [ $method_chaining_count -gt 0 ]; then
        echo -e "\n${BLUE}–ü—Ä–∏–º–µ—Ä—ã –º–µ—Ç–æ–¥-—á–µ–π–Ω–∏–Ω–≥–∞:${NC}"
        echo "$method_chaining_output" | head -n 5 | while read -r line; do
            echo -e "${GREEN}- $line${NC}"
        done
        
        if [ $method_chaining_count -gt 5 ]; then
            echo -e "${GREEN}... –∏ –µ—â–µ $(( method_chaining_count - 5 )) –ø—Ä–∏–º–µ—Ä–æ–≤${NC}"
        fi
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
function check_types_and_interfaces() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¢–ò–ü–û–í –ò –ò–ù–¢–ï–†–§–ï–ô–°–û–í"
    
    echo -e "${BLUE}–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ...${NC}"
    
    # –ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ç–∏–ø–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    local type_count=$(grep -r "type " --include="*.ts" "$PROJECT_PATH/src" | wc -l)
    local interface_count=$(grep -r "interface " --include="*.ts" "$PROJECT_PATH/src" | wc -l)
    local enum_count=$(grep -r "enum " --include="*.ts" "$PROJECT_PATH/src" | wc -l)
    
    # –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è any –∏ unknown
    local any_count=$(grep -r ": any" --include="*.ts" "$PROJECT_PATH/src" | wc -l)
    local unknown_count=$(grep -r ": unknown" --include="*.ts" "$PROJECT_PATH/src" | wc -l)
    
    # –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    local union_count=$(grep -r -E ": [A-Za-z0-9]+[ ]*\|[ ]*[A-Za-z0-9]+" --include="*.ts" "$PROJECT_PATH/src" | wc -l)
    local intersection_count=$(grep -r -E ": [A-Za-z0-9]+[ ]*&[ ]*[A-Za-z0-9]+" --include="*.ts" "$PROJECT_PATH/src" | wc -l)
    
    echo -e "${BLUE}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ —Ç–∏–ø–æ–≤:${NC}"
    echo -e "${GREEN}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∏–ø—ã: $type_count${NC}"
    echo -e "${GREEN}–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: $interface_count${NC}"
    echo -e "${BLUE}–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è (enum): $enum_count${NC}"
    echo -e "${YELLOW}–¢–∏–ø—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (union): $union_count${NC}"
    echo -e "${YELLOW}–¢–∏–ø—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (intersection): $intersection_count${NC}"
    
    if [ $any_count -gt 0 ]; then
        echo -e "${RED}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ any: $any_count —Ä–∞–∑${NC}"
        emotional_state "concerned" "–¢–∏–ø 'any' —Å–Ω–∏–∂–∞–µ—Ç —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –∏–ª–∏ 'unknown'."
    else
        echo -e "${GREEN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ any: $any_count —Ä–∞–∑${NC}"
        emotional_state "proud" "–ú—ã –∏–∑–±–µ–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 'any'. –û—Ç–ª–∏—á–Ω–∞—è —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å!"
    fi
    
    echo -e "${BLUE}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ unknown: $unknown_count —Ä–∞–∑${NC}"
    
    local total_types=$((type_count + interface_count))
    
    if [ $total_types -gt 30 ]; then
        echo -e "${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ø–∏–∑–∞—Ü–∏–∏! ($total_types —Ç–∏–ø–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤)${NC}"
        emotional_state "excited" "–ù–∞—à –∫–æ–¥ –æ—Ç–ª–∏—á–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω! –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º!"
    elif [ $total_types -gt 15 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ø–∏–∑–∞—Ü–∏–∏. ($total_types —Ç–∏–ø–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤)${NC}"
        emotional_state "happy" "–£ –Ω–∞—Å —Ö–æ—Ä–æ—à–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è, –Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–µ –µ—â–µ –ª—É—á—à–µ!"
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–∏–ø–∏–∑–∞—Ü–∏–∏. ($total_types —Ç–∏–ø–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤)${NC}"
        emotional_state "concerned" "–ù–∞–º –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é –∫–æ–¥–∞ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏."
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
function generate_functional_report() {
    print_header "üìä –û–¢–ß–ï–¢ –û –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ú –°–¢–ò–õ–ï –ö–û–î–ê"
    
    echo -e "${BLUE}–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:${NC}"
    echo -e "${BLUE}------------------------------${NC}"
    
    echo -e "${GREEN}1. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π—Ç–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö${NC}"
    echo -e "${GREEN}   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [...array] –≤–º–µ—Å—Ç–æ array.push()${NC}"
    echo -e "${GREEN}   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ { ...object } –≤–º–µ—Å—Ç–æ object.property = value${NC}"
    
    echo -e "${GREEN}2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞${NC}"
    echo -e "${GREEN}   - map, filter, reduce –≤–º–µ—Å—Ç–æ —Ü–∏–∫–ª–æ–≤${NC}"
    echo -e "${GREEN}   - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏${NC}"
    
    echo -e "${GREEN}3. –ü–∏—à–∏—Ç–µ —á–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏${NC}"
    echo -e "${GREEN}   - –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤${NC}"
    echo -e "${GREEN}   - –í—ã–¥–µ–ª—è–π—Ç–µ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏${NC}"
    
    echo -e "${GREEN}4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π${NC}"
    echo -e "${GREEN}   - –°–æ–∑–¥–∞–π—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ pipe() –∏ compose()${NC}"
    echo -e "${GREEN}   - –†–∞–∑–±–∏–≤–∞–π—Ç–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏${NC}"
    
    echo -e "${GREEN}5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤${NC}"
    echo -e "${GREEN}   - –ò–∑–±–µ–≥–∞–π—Ç–µ —Ç–∏–ø–∞ any${NC}"
    echo -e "${GREEN}   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤${NC}"
    echo -e "${GREEN}   - –û–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö${NC}"
    
    echo -e "\n${BLUE}–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
    echo -e "${GREEN}- fp-ts: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ TypeScript${NC}"
    echo -e "${GREEN}- immutable.js: –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö${NC}"
    echo -e "${GREEN}- lodash/fp: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è lodash${NC}"
    echo -e "${GREEN}- ramda: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é${NC}"
    
    emotional_state "love" "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–º, —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º –∏ –º–µ–Ω–µ–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–Ω—ã–º –æ—à–∏–±–∫–∞–º!"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    print_header "üõ°Ô∏è –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –°–¢–ò–õ–Ø –ö–û–î–ê"
    emotional_state "neutral" "–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_functional_approach
    check_immutability
    check_pure_functions
    check_function_composition
    check_types_and_interfaces
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    generate_functional_report
    
    emotional_state "happy" "–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω!"
    return 0
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main 