#!/bin/bash

# =========================================
# code-style-guard.sh - –≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑—Ä–µ–Ω–∏–µ –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä–∞
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∏–ª—è –∫–æ–¥–∞
# =========================================

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../.." && pwd)"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä–∞
function emotional_state() {
    local status=$1
    local message=$2
    local emoji=""
    
    case $status in
        "happy") emoji="üòä" ;;
        "proud") emoji="üòé" ;;
        "concerned") emoji="üòü" ;;
        "excited") emoji="ü§©" ;;
        "neutral") emoji="üòê" ;;
        "sad") emoji="üò¢" ;;
    esac
    
    echo -e "${PURPLE}–ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä ${emoji}: ${message}${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function print_header() {
    echo -e "${CYAN}======================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}======================================${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function check_dependencies() {
    local dependencies=("eslint" "prettier" "typescript")
    local missing_deps=()
    
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &> /dev/null && ! npx --no-install "$dep" --version &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:${NC}"
        for dep in "${missing_deps[@]}"; do
            echo -e "${RED}- $dep${NC}"
        done
        echo -e "${YELLOW}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é npm:${NC}"
        echo -e "${BLUE}npm install -D ${missing_deps[*]}${NC}"
        
        emotional_state "sad" "–Ø –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∏–ª—å –∫–æ–¥–∞ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeScript —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
function check_typescript() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê TYPESCRIPT –§–ê–ô–õ–û–í"
    
    echo -e "${BLUE}–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ TypeScript...${NC}"
    local ts_output
    ts_output=$(cd "$PROJECT_PATH" && npx tsc --noEmit 2>&1)
    local ts_status=$?
    
    if [ $ts_status -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –í—Å–µ TypeScript —Ñ–∞–π–ª—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤!${NC}"
        emotional_state "happy" "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ —Ç–∏–ø—ã –Ω–∞ –º–µ—Å—Ç–µ!"
    else
        echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ TypeScript —Ñ–∞–π–ª–∞—Ö:${NC}"
        echo -e "${RED}$ts_output${NC}"
        emotional_state "concerned" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏. –≠—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å."
    fi
    
    return $ts_status
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ESLint
function run_eslint() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –ö–û–î–ê –° –ü–û–ú–û–©–¨–Æ ESLINT"
    
    echo -e "${BLUE}–ó–∞–ø—É—Å–∫–∞—é ESLint...${NC}"
    local eslint_output
    eslint_output=$(cd "$PROJECT_PATH" && npx eslint --ext .ts,.js src 2>&1)
    local eslint_status=$?
    
    if [ $eslint_status -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º ESLint!${NC}"
        emotional_state "proud" "–ú–æ–π –∫–æ–¥ –∏–¥–µ–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º!"
    else
        echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã ESLint:${NC}"
        echo -e "${RED}$eslint_output${NC}"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        local error_count=$(echo "$eslint_output" | grep -c "error")
        local warning_count=$(echo "$eslint_output" | grep -c "warning")
        
        echo -e "${RED}–û—à–∏–±–æ–∫: $error_count, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $warning_count${NC}"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        echo -e "${YELLOW}–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã? (y/n)${NC}"
        read -r answer
        
        if [ "$answer" = "y" ] || [ "$answer" = "Y" ]; then
            echo -e "${BLUE}–ò—Å–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–ª–µ–º—ã ESLint...${NC}"
            local fix_output
            fix_output=$(cd "$PROJECT_PATH" && npx eslint --ext .ts,.js src --fix 2>&1)
            echo -e "${GREEN}–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!${NC}"
            emotional_state "happy" "–Ø –∏—Å–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ!"
        else
            emotional_state "neutral" "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å—Ç–∏–ª—è –∫–æ–¥–∞ –≤—Ä—É—á–Ω—É—é."
        fi
    fi
    
    return $eslint_status
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Prettier
function run_prettier() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –° –ü–û–ú–û–©–¨–Æ PRETTIER"
    
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä—è—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...${NC}"
    local prettier_output
    prettier_output=$(cd "$PROJECT_PATH" && npx prettier --check "src/**/*.{ts,js}" 2>&1)
    local prettier_status=$?
    
    if [ $prettier_status -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º Prettier!${NC}"
        emotional_state "proud" "–ú–æ–π –∫–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –Ø —Ü–µ–Ω—é —ç—Å—Ç–µ—Ç–∏–∫—É –∫–æ–¥–∞."
    else
        echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
        echo -e "${RED}$prettier_output${NC}"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        local unformatted_count=$(echo "$prettier_output" | grep -c "would be formatted")
        
        echo -e "${RED}–ù–µ–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $unformatted_count${NC}"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        echo -e "${YELLOW}–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥? (y/n)${NC}"
        read -r answer
        
        if [ "$answer" = "y" ] || [ "$answer" = "Y" ]; then
            echo -e "${BLUE}–§–æ—Ä–º–∞—Ç–∏—Ä—É—é –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é Prettier...${NC}"
            local format_output
            format_output=$(cd "$PROJECT_PATH" && npx prettier --write "src/**/*.{ts,js}" 2>&1)
            echo -e "${GREEN}–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!${NC}"
            emotional_state "happy" "–¢–µ–ø–µ—Ä—å –∫–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –∫—Ä–∞—Å–∏–≤–æ –∏ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ!"
        else
            emotional_state "neutral" "–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è."
        fi
    fi
    
    return $prettier_status
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
function check_naming_conventions() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –°–û–ì–õ–ê–®–ï–ù–ò–ô –û–ë –ò–ú–ï–ù–û–í–ê–ù–ò–ò"
    
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
    local file_naming_issues=0
    local interface_naming_issues=0
    local class_naming_issues=0
    
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤...${NC}"
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤ –∏–ª–∏ —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –≤ –∏–º–µ–Ω–∞—Ö (–¥–ª—è —Ñ–∞–π–ª–æ–≤)
    local file_naming_output
    file_naming_output=$(find "$PROJECT_PATH/src" -type f \( -name "*.ts" -o -name "*.js" \) | grep -E '[A-Z]|[^a-zA-Z0-9\.\-\/]' | sort)
    
    if [ -n "$file_naming_output" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º:${NC}"
        echo "$file_naming_output" | while read -r file; do
            echo -e "${YELLOW}- $file${NC}"
            ((file_naming_issues++))
        done
    else
        echo -e "${GREEN}‚úÖ –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º.${NC}"
    fi
    
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (–¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'I')...${NC}"
    
    # –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ I
    local interface_naming_output
    interface_naming_output=$(grep -r "interface [^I]" --include="*.ts" "$PROJECT_PATH/src" | sort)
    
    if [ -n "$interface_naming_output" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º:${NC}"
        echo "$interface_naming_output" | while read -r line; do
            echo -e "${YELLOW}- $line${NC}"
            ((interface_naming_issues++))
        done
    else
        echo -e "${GREEN}‚úÖ –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º.${NC}"
    fi
    
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ (–¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)...${NC}"
    
    # –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤ –±–µ–∑ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
    local class_naming_output
    class_naming_output=$(grep -r "class [a-z]" --include="*.ts" "$PROJECT_PATH/src" | sort)
    
    if [ -n "$class_naming_output" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Å—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º:${NC}"
        echo "$class_naming_output" | while read -r line; do
            echo -e "${YELLOW}- $line${NC}"
            ((class_naming_issues++))
        done
    else
        echo -e "${GREEN}‚úÖ –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º.${NC}"
    fi
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    local total_issues=$((file_naming_issues + interface_naming_issues + class_naming_issues))
    
    if [ $total_issues -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏!${NC}"
        emotional_state "proud" "–Ø –æ—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å—é –Ω–µ–π–º–∏–Ω–≥–∞ –≤ –Ω–∞—à–µ–º –∫–æ–¥–µ!"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $total_issues –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º–∏ –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏.${NC}"
        emotional_state "concerned" "–ù–∞–º –Ω—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å—é –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ."
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
function check_code_complexity() {
    print_header "üîç –ü–†–û–í–ï–†–ö–ê –°–õ–û–ñ–ù–û–°–¢–ò –ö–û–î–ê"
    
    echo -e "${BLUE}–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –∏ –º–µ—Ç–æ–¥–æ–≤...${NC}"
    
    # –ü–æ–∏—Å–∫ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–±–æ–ª–µ–µ 50 —Å—Ç—Ä–æ–∫)
    local long_functions_output
    long_functions_output=$(find "$PROJECT_PATH/src" -type f \( -name "*.ts" -o -name "*.js" \) -exec grep -l "function" {} \; | xargs grep -n "function" | awk -F ":" '{print $1 ":" $2}' | while read -r file_line; do
        file=$(echo "$file_line" | cut -d':' -f1)
        line_num=$(echo "$file_line" | cut -d':' -f2)
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        local start_line=$line_num
        local function_length=$(tail -n "+$start_line" "$file" | awk 'BEGIN {count=0; braces=0} 
            /\{/ {braces++} 
            /\}/ {braces--; if (braces == 0) exit} 
            {count++} 
            END {print count}')
        
        if [ "$function_length" -gt 50 ]; then
            echo "$file:$line_num:$function_length —Å—Ç—Ä–æ–∫"
        fi
    done | sort)
    
    if [ -n "$long_functions_output" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–æ–ª–µ–µ 50 —Å—Ç—Ä–æ–∫):${NC}"
        echo "$long_functions_output" | while read -r func; do
            echo -e "${YELLOW}- $func${NC}"
        done
        emotional_state "concerned" "–í –Ω–∞—à–µ–º –∫–æ–¥–µ –µ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ò—Ö —Å—Ç–æ–∏—Ç —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ!"
    else
        echo -e "${GREEN}‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π —Å —á—Ä–µ–∑–º–µ—Ä–Ω–æ–π –¥–ª–∏–Ω–æ–π!${NC}"
        emotional_state "proud" "–ù–∞—à –∫–æ–¥ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω - —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ!"
    fi
    
    # –ü–æ–∏—Å–∫ –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–±–æ–ª–µ–µ 3 —É—Ä–æ–≤–Ω–µ–π)
    echo -e "${BLUE}–ò—â—É –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è...${NC}"
    
    local nested_conditions_output
    nested_conditions_output=$(find "$PROJECT_PATH/src" -type f \( -name "*.ts" -o -name "*.js" \) -exec grep -l "if" {} \; | xargs grep -n "if" | sort)
    
    local has_deep_nesting=false
    
    if [ -n "$nested_conditions_output" ]; then
        # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ, —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        echo -e "${YELLOW}‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å–ª–æ–≤–∏–π:${NC}"
        echo "$nested_conditions_output" | head -n 10 | while read -r condition; do
            echo -e "${YELLOW}- $condition${NC}"
        done
        
        if [ $(echo "$nested_conditions_output" | wc -l) -gt 10 ]; then
            echo -e "${YELLOW}... –∏ –µ—â–µ $(( $(echo "$nested_conditions_output" | wc -l) - 10 )) –º–µ—Å—Ç${NC}"
        fi
        
        emotional_state "neutral" "–°–æ–≤–µ—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —É—Å–ª–æ–≤–∏–π –≤—Ä—É—á–Ω—É—é. –°—Ç–æ–∏—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è."
    else
        echo -e "${GREEN}‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å —á—Ä–µ–∑–º–µ—Ä–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é!${NC}"
    fi
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    echo -e "\n${BLUE}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞:${NC}"
    echo -e "${GREEN}1. –†–∞–∑–±–∏–≤–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ (–¥–æ 20-30 —Å—Ç—Ä–æ–∫)${NC}"
    echo -e "${GREEN}2. –ò–∑–±–µ–≥–∞–π—Ç–µ –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å–ª–æ–≤–∏–π (–±–æ–ª–µ–µ 3 —É—Ä–æ–≤–Ω–µ–π)${NC}"
    echo -e "${GREEN}3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–Ω–Ω–µ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π${NC}"
    echo -e "${GREEN}4. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π${NC}"
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ç–∏–ª–µ –∫–æ–¥–∞
function generate_report() {
    local ts_status=$1
    local eslint_status=$2
    local prettier_status=$3
    local naming_status=$4
    
    print_header "üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–¢–ò–õ–Ø –ö–û–î–ê"
    
    echo -e "${BLUE}–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–æ–∫:${NC}"
    echo -e "${BLUE}------------------------------${NC}"
    
    if [ $ts_status -eq 0 ]; then
        echo -e "${GREEN}‚úÖ TypeScript: –£—Å–ø–µ—à–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå TypeScript: –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏${NC}"
    fi
    
    if [ $eslint_status -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ESLint: –£—Å–ø–µ—à–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå ESLint: –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏${NC}"
    fi
    
    if [ $prettier_status -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Prettier: –£—Å–ø–µ—à–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå Prettier: –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏${NC}"
    fi
    
    if [ $naming_status -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏—è –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏: –£—Å–ø–µ—à–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå –°–æ–≥–ª–∞—à–µ–Ω–∏—è –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã${NC}"
    fi
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    local total_status=$((ts_status + eslint_status + prettier_status + naming_status))
    
    if [ $total_status -eq 0 ]; then
        echo -e "\n${GREEN}üéâ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: –û–¢–õ–ò–ß–ù–û!${NC}"
        emotional_state "excited" "–ù–∞—à –∫–æ–¥ –±–µ–∑—É–ø—Ä–µ—á–µ–Ω! –Ø –æ—á–µ–Ω—å –≥–æ—Ä–∂—É—Å—å –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–æ–π!"
    elif [ $total_status -eq 1 ]; then
        echo -e "\n${YELLOW}üîç –û–ë–©–ò–ô –°–¢–ê–¢–£–°: –•–û–†–û–®–û!${NC}"
        emotional_state "happy" "–ö–æ–¥ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –ª—É—á—à–µ!"
    else
        echo -e "\n${RED}‚ö†Ô∏è –û–ë–©–ò–ô –°–¢–ê–¢–£–°: –¢–†–ï–ë–£–Æ–¢–°–Ø –£–õ–£–ß–®–ï–ù–ò–Ø!${NC}"
        emotional_state "concerned" "–ù–∞–º –Ω—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–∞—á–µ—Å—Ç–≤–æ–º –∫–æ–¥–∞!"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    print_header "üõ°Ô∏è –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –°–¢–ò–õ–Ø –ö–û–î–ê"
    emotional_state "neutral" "–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∏–ª—è –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! check_dependencies; then
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    local ts_status=0
    local eslint_status=0
    local prettier_status=0
    local naming_status=0
    
    check_typescript
    ts_status=$?
    
    run_eslint
    eslint_status=$?
    
    run_prettier
    prettier_status=$?
    
    check_naming_conventions
    naming_status=$?
    
    check_code_complexity
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report "$ts_status" "$eslint_status" "$prettier_status" "$naming_status"
    
    return $((ts_status + eslint_status + prettier_status + naming_status))
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main 