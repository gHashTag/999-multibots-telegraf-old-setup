#!/bin/bash

# ======================================================
# üåà SYSTEM-CHECK.SH 
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã NeuroBlogger
# –ß–∞—Å—Ç—å —Ä–∞–¥—É–∂–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
# ======================================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
OK_EMOJI="‚úÖ"
WARN_EMOJI="‚ö†Ô∏è"
ERROR_EMOJI="‚ùå"
INFO_EMOJI="‚ÑπÔ∏è"
CHECK_EMOJI="üîç"
HEART_EMOJI="üíñ"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
print_header() {
    echo -e "\n${BLUE}============================================================${NC}"
    echo -e "${CYAN}                   SYSTEM CHECK REPORT                     ${NC}"
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${PURPLE}–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:${NC} $(date)"
    echo -e "${PURPLE}–ò–º—è —Ö–æ—Å—Ç–∞:${NC} $(hostname)\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å–µ–∫—Ü–∏–∏
print_section() {
    echo -e "\n${YELLOW}==== $1 ====${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
print_check_result() {
    local status=$1
    local message=$2
    local details=$3

    if [ "$status" == "OK" ]; then
        echo -e "${GREEN}${OK_EMOJI} ${message}${NC}"
        if [ ! -z "$details" ]; then
            echo -e "   ${CYAN}${details}${NC}"
        fi
    elif [ "$status" == "WARN" ]; then
        echo -e "${YELLOW}${WARN_EMOJI} ${message}${NC}"
        if [ ! -z "$details" ]; then
            echo -e "   ${CYAN}${details}${NC}"
        fi
    elif [ "$status" == "ERROR" ]; then
        echo -e "${RED}${ERROR_EMOJI} ${message}${NC}"
        if [ ! -z "$details" ]; then
            echo -e "   ${CYAN}${details}${NC}"
        fi
    else
        echo -e "${BLUE}${INFO_EMOJI} ${message}${NC}"
        if [ ! -z "$details" ]; then
            echo -e "   ${CYAN}${details}${NC}"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
check_project_directory() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    
    local project_dir=$(pwd)
    if [ -d "$project_dir" ]; then
        print_check_result "OK" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$project_dir"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è package.json
        if [ -f "$project_dir/package.json" ]; then
            local version=$(grep -o '"version": "[^"]*' package.json | cut -d'"' -f4)
            print_check_result "OK" "–§–∞–π–ª package.json –Ω–∞–π–¥–µ–Ω" "–í–µ—Ä—Å–∏—è: $version"
        else
            print_check_result "ERROR" "–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–æ–≤
        if [ -f "$project_dir/.env" ]; then
            print_check_result "OK" "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
        else
            print_check_result "WARN" "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        if [ -f "$project_dir/.env.production" ]; then
            print_check_result "OK" "–§–∞–π–ª .env.production –Ω–∞–π–¥–µ–Ω"
        else
            print_check_result "WARN" "–§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    else
        print_check_result "ERROR" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"
    
    if command -v docker &> /dev/null; then
        local docker_version=$(docker --version)
        print_check_result "OK" "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "$docker_version"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        if docker ps | grep -q "999-multibots"; then
            print_check_result "OK" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '999-multibots' –∑–∞–ø—É—â–µ–Ω"
        else
            print_check_result "ERROR" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '999-multibots' –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
        
        if docker ps | grep -q "nginx-proxy"; then
            print_check_result "OK" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'nginx-proxy' –∑–∞–ø—É—â–µ–Ω"
        else
            print_check_result "WARN" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'nginx-proxy' –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    else
        print_check_result "ERROR" "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
check_nodejs() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –∏ npm"
    
    if command -v node &> /dev/null; then
        local node_version=$(node -v)
        print_check_result "OK" "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "$node_version"
    else
        print_check_result "WARN" "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if command -v npm &> /dev/null; then
        local npm_version=$(npm -v)
        print_check_result "OK" "npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "$npm_version"
    else
        print_check_result "WARN" "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
check_supabase() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
    if grep -q "SUPABASE_URL" .env.production 2>/dev/null || grep -q "SUPABASE_URL" .env 2>/dev/null; then
        local supabase_url=$(grep "SUPABASE_URL" .env.production 2>/dev/null || grep "SUPABASE_URL" .env 2>/dev/null)
        supabase_url=${supabase_url#*=}
        print_check_result "OK" "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SUPABASE_URL –Ω–∞–π–¥–µ–Ω–∞" "$supabase_url"
    else
        print_check_result "ERROR" "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SUPABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    if grep -q "SUPABASE_KEY" .env.production 2>/dev/null || grep -q "SUPABASE_KEY" .env 2>/dev/null; then
        print_check_result "OK" "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SUPABASE_KEY –Ω–∞–π–¥–µ–Ω–∞"
    else
        print_check_result "ERROR" "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ Telegram –±–æ—Ç–æ–≤
check_telegram_tokens() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ Telegram –±–æ—Ç–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ .env –∏–ª–∏ .env.production
    local token_count_env=0
    local token_count_prod=0
    
    if [ -f ".env" ]; then
        token_count_env=$(grep -c "BOT_TOKEN_" .env)
    fi
    
    if [ -f ".env.production" ]; then
        token_count_prod=$(grep -c "BOT_TOKEN_" .env.production)
    fi
    
    if [ $token_count_env -gt 0 ] || [ $token_count_prod -gt 0 ]; then
        if [ $token_count_env -gt 0 ]; then
            print_check_result "OK" "–¢–æ–∫–µ–Ω—ã Telegram –±–æ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã –≤ .env" "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $token_count_env"
        fi
        if [ $token_count_prod -gt 0 ]; then
            print_check_result "OK" "–¢–æ–∫–µ–Ω—ã Telegram –±–æ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã –≤ .env.production" "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $token_count_prod"
        fi
    else
        print_check_result "ERROR" "–¢–æ–∫–µ–Ω—ã Telegram –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ TypeScript
check_typescript_build() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ TypeScript"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist
    if [ -d "dist" ]; then
        print_check_result "OK" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ dist
        if [ -f "dist/bot.js" ]; then
            print_check_result "OK" "–§–∞–π–ª dist/bot.js –Ω–∞–π–¥–µ–Ω"
        else
            print_check_result "ERROR" "–§–∞–π–ª dist/bot.js –Ω–µ –Ω–∞–π–¥–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript"
            print_check_result "INFO" "–†–µ—à–µ–Ω–∏–µ: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'npm run build' –∏–ª–∏ 'npx tsc'"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ dist
        local required_dirs=("dist/core" "dist/utils" "dist/helpers" "dist/interfaces")
        for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
                print_check_result "OK" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–∞–π–¥–µ–Ω–∞"
            else
                print_check_result "ERROR" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–ø–æ–ª–Ω–∞—è"
                print_check_result "INFO" "–†–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é '$dir' –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—É—é –∫–æ–º–ø–∏–ª—è—Ü–∏—é TypeScript"
            fi
        done
    else
        print_check_result "ERROR" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript"
        print_check_result "INFO" "–†–µ—à–µ–Ω–∏–µ: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'npm run build' –∏–ª–∏ 'npx tsc'"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
check_logs() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤"
    
    local logs_dir="logs"
    if [ -d "$logs_dir" ]; then
        local logs_size=$(du -sh "$logs_dir" | cut -f1)
        local logs_count=$(find "$logs_dir" -type f | wc -l)
        print_check_result "OK" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–∞–π–¥–µ–Ω–∞" "–†–∞–∑–º–µ—Ä: $logs_size, —Ñ–∞–π–ª–æ–≤: $logs_count"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–≤–µ–∂–∏—Ö –ª–æ–≥–æ–≤ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        local recent_logs=$(find "$logs_dir" -type f -mtime -1 | wc -l)
        if [ $recent_logs -gt 0 ]; then
            print_check_result "OK" "–ù–∞–π–¥–µ–Ω—ã —Å–≤–µ–∂–∏–µ –ª–æ–≥–∏" "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: $recent_logs"
        else
            print_check_result "WARN" "–°–≤–µ–∂–∏–µ –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        print_check_result "WARN" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
check_disk_usage() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞"
    
    local disk_usage=$(df -h . | tail -n 1)
    local usage_percent=$(echo $disk_usage | awk '{print $5}')
    local available=$(echo $disk_usage | awk '{print $4}')
    
    if [ "${usage_percent%\%}" -gt 90 ]; then
        print_check_result "ERROR" "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 90%" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $usage_percent, –¥–æ—Å—Ç—É–ø–Ω–æ: $available"
    elif [ "${usage_percent%\%}" -gt 70 ]; then
        print_check_result "WARN" "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 70%" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $usage_percent, –¥–æ—Å—Ç—É–ø–Ω–æ: $available"
    else
        print_check_result "OK" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –≤ –Ω–æ—Ä–º–µ" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $usage_percent, –¥–æ—Å—Ç—É–ø–Ω–æ: $available"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
check_important_files() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    local dirs=("src" "scripts" "dist" "logs")
    for dir in "${dirs[@]}"; do
        if [ -d "$dir" ]; then
            print_check_result "OK" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$dir' –Ω–∞–π–¥–µ–Ω–∞"
        else
            print_check_result "WARN" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$dir' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    local files=("package.json" "tsconfig.json" "docker-compose.yml" "Dockerfile")
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            print_check_result "OK" "–§–∞–π–ª '$file' –Ω–∞–π–¥–µ–Ω"
        else
            print_check_result "WARN" "–§–∞–π–ª '$file' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ ROADMAP.md
    local roadmap_file="src/core/mcp/agent/memory-bank/NeuroBlogger/ROADMAP.md"
    if [ -f "$roadmap_file" ]; then
        local last_updated=$(grep -o "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: [0-9.]*" "$roadmap_file" | cut -d' ' -f3)
        print_check_result "OK" "–§–∞–π–ª ROADMAP.md –Ω–∞–π–¥–µ–Ω" "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $last_updated"
    else
        print_check_result "WARN" "–§–∞–π–ª ROADMAP.md –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
check_docker_app_run() {
    print_section "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 999-multibots –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
    if docker ps | grep -q "999-multibots"; then
        local error_count=$(docker logs --tail 50 999-multibots 2>&1 | grep -c "Error: Cannot find module '/app/dist/bot.js'")
        if [ $error_count -gt 0 ]; then
            print_check_result "ERROR" "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ MODULE_NOT_FOUND –¥–ª—è /app/dist/bot.js" "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $error_count"
            print_check_result "INFO" "–†–µ—à–µ–Ω–∏–µ 1: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–±–æ—Ä–∫—É TypeScript - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'npm run build'"
            print_check_result "INFO" "–†–µ—à–µ–Ω–∏–µ 2: –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ dist –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
            print_check_result "INFO" "–ö–æ–º–∞–Ω–¥–∞: mkdir -p /app/dist/utils /app/dist/helpers/error /app/dist/interfaces /app/dist/core/bot"
        else
            print_check_result "OK" "–û—à–∏–±–∫–∏ MODULE_NOT_FOUND –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –ª–æ–≥–∞—Ö Docker"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É winston
        if docker logs --tail 30 999-multibots 2>&1 | grep -q "–ú–æ–¥—É–ª—å winston –Ω–µ –Ω–∞–π–¥–µ–Ω"; then
            print_check_result "WARN" "Winston —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏"
            print_check_result "INFO" "–†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤—å—Ç–µ winston –≤ package.json –∏ –ø–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ Docker –æ–±—Ä–∞–∑"
        fi
    else
        print_check_result "ERROR" "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 999-multibots –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏"
    fi
}

# –í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
print_system_state() {
    print_section "–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å
    local state="HEALTHY"
    local details="–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    
    if grep -q "ERROR" /tmp/system_check_temp 2>/dev/null; then
        state="CRITICAL"
        details="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    elif grep -q "WARN" /tmp/system_check_temp 2>/dev/null; then
        state="WARNING"
        details="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
    fi
    
    if [ "$state" == "HEALTHY" ]; then
        echo -e "\n${GREEN}${HEART_EMOJI} –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: –ó–î–û–†–û–í–ê${NC}"
        echo -e "${GREEN}${details}${NC}"
    elif [ "$state" == "WARNING" ]; then
        echo -e "\n${YELLOW}${WARN_EMOJI} –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø${NC}"
        echo -e "${YELLOW}${details}${NC}"
    else
        echo -e "\n${RED}${ERROR_EMOJI} –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò${NC}"
        echo -e "${RED}${details}${NC}"
    fi
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    rm -f /tmp/system_check_temp
}

# –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä–∞
print_emotional_state() {
    print_section "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä–∞"
    
    local emotions=("—Ä–∞–¥–æ—Å—Ç—å" "–∑–∞–±–æ—Ç–∞" "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ" "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ" "—ç–Ω—Ç—É–∑–∏–∞–∑–º")
    local random_index=$((RANDOM % 5))
    local emotion=${emotions[$random_index]}
    
    if [ "$emotion" == "—Ä–∞–¥–æ—Å—Ç—å" ]; then
        echo -e "${YELLOW}üòä –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ä–∞–¥–æ—Å—Ç—å –æ—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π${NC}"
    elif [ "$emotion" == "–∑–∞–±–æ—Ç–∞" ]; then
        echo -e "${GREEN}üíö –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–∏—Å—Ç–µ–º–µ${NC}"
    elif [ "$emotion" == "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ" ]; then
        echo -e "${PURPLE}‚ú® –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Å–∏—Å—Ç–µ–º—ã${NC}"
    elif [ "$emotion" == "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ" ]; then
        echo -e "${BLUE}üåü –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã${NC}"
    else
        echo -e "${CYAN}üöÄ –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä –ø–æ–ª–æ–Ω —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    exec > >(tee -a /tmp/system_check_temp)
    
    print_header
    check_project_directory
    check_docker
    check_nodejs
    check_supabase
    check_telegram_tokens
    check_typescript_build
    check_docker_app_run
    check_logs
    check_disk_usage
    check_important_files
    print_system_state
    print_emotional_state
    
    echo -e "\n${BLUE}============================================================${NC}"
    echo -e "${CYAN}           –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–ê                     ${NC}"
    echo -e "${BLUE}============================================================${NC}"
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
    exec > /dev/tty
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main 