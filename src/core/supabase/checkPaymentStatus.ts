import { MyWizardContext, Subscription } from '@/interfaces'
import { supabase } from '.'
import { isRussian } from '@/helpers/language'
import { checkFullAccess } from '@/handlers/checkFullAccess'
import { isDev } from '@/config'

export const checkPaymentStatus = async (
  ctx: MyWizardContext,
  subscription: Subscription
): Promise<boolean> => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ctx –∏ ctx.from –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
  if (!ctx || !ctx.from || !ctx.from.id) {
    console.error('–û—à–∏–±–∫–∞: ctx –∏–ª–∏ ctx.from –∏–ª–∏ ctx.from.id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã')
    return false
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: paymentData, error } = await supabase
      .from('payments') // TODO: –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ payments_history
      .select('payment_date')
      .eq('telegram_id', ctx.from.id.toString())
      .order('payment_date', { ascending: false })
      .limit(1)
      .single()
    console.log('paymentData', paymentData)

    if (error || !paymentData) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç–µ:', error)
      return false
    }

    const lastPaymentDate = new Date(paymentData.payment_date)
    const currentDate = new Date()
    const differenceInDays =
      (currentDate.getTime() - lastPaymentDate.getTime()) / (1000 * 3600 * 24)
    console.log('differenceInDays', differenceInDays)

    if (differenceInDays < 30) {
      // differenceInDays > 30
      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 'stars']
      const isFullAccess = checkFullAccess(subscription)
      if (isFullAccess) {
        const isRu = isRussian(ctx)
        if (!isDev) {
          if (subscription !== 'neurotester') {
            await ctx.reply(
              isRu
                ? 'ü§ë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞.'
                : 'ü§ëYour subscription has expired. Please update your subscription to continue using the service.'
            )
          }
        }

        return false
      }
    }
    const { error: updateError } = await supabase
      .from('users')
      .update({ subscription: 'stars' })
      .eq('telegram_id', ctx.from.id.toString())

    if (updateError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏:', updateError)
    }

    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:', error)
    return false
  }
}
