import dotenv from 'dotenv'

dotenv.config()

import { Telegraf, session } from 'telegraf'
import { MyContext } from '@/interfaces/telegram-bot.interface'

import { logger } from '@/utils/logger'
import { NODE_ENV } from '@/config'
import { getBotGroupFromAvatars } from '../supabase/getBotGroupFromAvatars'

// –û–±—ä—è–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å BotExtraOptions, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ createBot
interface BotExtraOptions {
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

// –û–ø—Ä–µ–¥–µ–ª–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã Bot –∏ BotList, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
interface Bot {
  bot: Telegraf<MyContext>
  id: string
}

type BotList = Bot[]

interface Scenes {
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è Scenes
}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
 */
function validateToken(token?: string): boolean {
  if (!token) {
    console.error('validateToken: Bot token is empty or undefined')
    return false
  }

  const regex = /^\d+:[\w-]+$/
  const isValid = regex.test(token)

  if (!isValid) {
    console.error(`validateToken: Invalid token format: ${token}`)
  }

  return isValid
}

/**
 * –§—É–Ω–∫—Ü–∏—è –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω, –æ—Å—Ç–∞–≤–ª—è—è –≤–∏–¥–∏–º—ã–º–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
 */
function maskToken(token: string): string {
  if (!token || token.length < 11) return '[INVALID_TOKEN_FORMAT]'

  const parts = token.split(':')
  if (parts.length !== 2) return '[INVALID_TOKEN_FORMAT]'

  const botId = parts[0]
  const secret = parts[1]

  // –ú–∞—Å–∫–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è –≤–∏–¥–∏–º—ã–º–∏ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
  const maskedSecret =
    secret.length > 10
      ? `${secret.substring(0, 5)}...${secret.substring(secret.length - 5)}`
      : '[SECRET_TOO_SHORT]'

  return `${botId}:${maskedSecret}`
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ createBot —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º–∏
export const createBot = async function createBot(
  token: string,
  optionsOrBotId?:
    | (Partial<Telegraf.Options<MyContext>> & BotExtraOptions)
    | string
): Promise<Telegraf<MyContext> | Bot | null> {
  // –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Å—Ç—Ä–æ–∫–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ botId, –∏–Ω–∞—á–µ - options
  const isBotId = typeof optionsOrBotId === 'string'
  const botId = isBotId ? optionsOrBotId : ''
  const options = isBotId ? {} : optionsOrBotId || {}

  if (isBotId) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å botId
    try {
      logger.info('ü§ñ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞...', {
        description: 'Creating bot instance',
        bot_id: botId,
        masked_token: maskToken(token),
      })

      if (!validateToken(token)) {
        logger.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞', {
          description: 'Invalid token, skipping bot creation',
          bot_id: botId,
        })
        return null
      }

      const bot = new Telegraf<MyContext>(token)

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø—É—Ç–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        const botInfo = await bot.telegram.getMe()
        logger.info('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', {
          description: 'Token is valid, bot info received',
          bot_id: botId,
          bot_username: botInfo.username,
          telegram_id: botInfo.id,
        })
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞', {
          description: 'Error verifying bot token',
          bot_id: botId,
          error: error instanceof Error ? error.message : String(error),
          error_code: error.response?.error_code,
          error_description: error.response?.description,
        })

        if (error.response?.error_code === 401) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401): –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω', {
            description: 'Unauthorized (401): Token is invalid',
            bot_id: botId,
          })

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
          if (error.response?.description?.includes('Unauthorized')) {
            logger.error(
              '‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: API –≤–µ—Ä–Ω—É–ª "Unauthorized"',
              {
                description:
                  'Authorization error details: API returned "Unauthorized"',
                bot_id: botId,
              }
            )
          }
        }

        return null
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞: middleware, session, etc.
      bot.use(session())

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º try-catch –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
      try {
        bot.use((ctx, next) => {
          // –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
          return next().catch(error => {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ middleware –±–æ—Ç–∞', {
              description: 'Error in bot middleware',
              bot_id: botId,
              error: error instanceof Error ? error.message : String(error),
            })
            return Promise.resolve()
          })
        })
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ middleware', {
          description: 'Error setting up middleware',
          bot_id: botId,
          error: error instanceof Error ? error.message : String(error),
        })
      }

      logger.info('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', {
        description: 'Bot created successfully',
        bot_id: botId,
      })

      return { bot, id: botId }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞', {
        description: 'Error creating bot',
        bot_id: botId,
        error: error instanceof Error ? error.message : String(error),
      })

      // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ–π –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
      return null
    }
  } else {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ createBot —Å options
    console.log(
      `Creating bot with token: ${token.substring(0, 5)}...${token.substring(token.length - 5)}`
    )

    if (!validateToken(token)) {
      const error = new Error(
        `Invalid bot token format: ${token.substring(0, 5)}...${token.substring(token.length - 5)}`
      )
      console.error(error)
      throw error
    }

    try {
      const bot = new Telegraf<MyContext>(token, options)

      console.log(
        'Bot created successfully, attempting to getMe to verify token...'
      )

      try {
        const me = await bot.telegram.getMe()
        console.log(`Bot verified: @${me.username} (ID: ${me.id})`)
        return bot
      } catch (error) {
        console.error('Error verifying bot with getMe:', error)
        throw new Error(`Failed to verify bot: ${error.message}`)
      }
    } catch (error) {
      console.error('Error creating bot:', error)
      throw new Error(`Failed to create bot: ${error.message}`)
    }
  }
}

// –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â—É—é—Å—è —Ñ—É–Ω–∫—Ü–∏—é initBot –Ω–∞ –æ–¥–Ω—É –≤–µ—Ä—Å–∏—é
export async function initBot(
  tokenOrEnv: string,
  optionsOrBotId?:
    | (Partial<Telegraf.Options<MyContext>> & BotExtraOptions)
    | string
): Promise<Telegraf<MyContext> | Bot | null> {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑–≤–∞–Ω
  const isBotId = typeof optionsOrBotId === 'string'

  if (isBotId) {
    // –í–µ—Ä—Å–∏—è initBot(token_env, bot_id)
    const token_env = tokenOrEnv
    const bot_id = optionsOrBotId || ''

    try {
      logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...', {
        description: 'Initializing bot',
        bot_id,
        token_env,
      })

      const token = process.env[token_env]

      if (!token) {
        logger.error(
          `‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: ${token_env} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è`,
          {
            description: 'Token not found in environment variables',
            token_env,
            bot_id,
            available_envs: Object.keys(process.env)
              .filter(key => key.includes('TOKEN') || key.includes('BOT'))
              .join(', '),
          }
        )
        return null
      }

      return createBot(token, bot_id)
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞', {
        description: 'Error initializing bot',
        bot_id,
        token_env,
        error: error instanceof Error ? error.message : String(error),
      })

      // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ–π –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
      return null
    }
  } else {
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è initBot(token, options)
    const token = tokenOrEnv
    const options = optionsOrBotId || {}

    const hasIndex = token.includes('_')
    const botNumber = hasIndex ? token.split('_')[1] : token

    const isDevelopment = process.env.NODE_ENV === 'development'

    const envVarName = `BOT_TOKEN${isDevelopment ? '_TEST' : ''}_${botNumber}`
    const botToken = process.env[envVarName]

    console.log(`Initializing bot ${botNumber} with env var: ${envVarName}`)

    if (!botToken) {
      const error = new Error(
        `Bot token not found in environment variable: ${envVarName}`
      )
      console.error(error)
      throw error
    }

    console.log(
      `Bot token from env: ${botToken.substring(0, 5)}...${botToken.substring(botToken.length - 5)}`
    )

    return createBot(botToken, options)
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
 */
export default async function init(): Promise<BotList> {
  logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–æ–≤...', {
    description: 'Starting bot initialization',
  })

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–æ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const tokenEntries = Object.entries(
    NODE_ENV === 'production'
      ? {
          neuro_blogger_bot: 'BOT_TOKEN_1',
          MetaMuse_Manifest_bot: 'BOT_TOKEN_2',
          ZavaraBot: 'BOT_TOKEN_3',
          LeeSolarbot: 'BOT_TOKEN_4',
          NeuroLenaAssistant_bot: 'BOT_TOKEN_5',
          NeurostylistShtogrina_bot: 'BOT_TOKEN_6',
          Gaia_Kamskaia_bot: 'BOT_TOKEN_7',
        }
      : {
          ai_koshey_bot: 'BOT_TOKEN_TEST_1',
          clip_maker_neuro_bot: 'BOT_TOKEN_TEST_2',
        }
  )

  const botPromises = tokenEntries.map(async ([bot_id, token_env]) => {
    try {
      const bot = await initBot(token_env, bot_id)
      return bot
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞', {
        description: 'Error initializing individual bot',
        bot_id,
        token_env,
        error: error instanceof Error ? error.message : String(error),
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ —Å–±–æ–π–Ω–æ–≥–æ –±–æ—Ç–∞
      return null
    }
  })

  // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º null-–∑–Ω–∞—á–µ–Ω–∏—è
  const botResults = await Promise.all(botPromises)
  const validBots = botResults.filter(Boolean) as Bot[]

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—ã
  const successCount = validBots.length
  const failCount = botResults.length - successCount

  logger.info('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
    description: 'Bot initialization completed',
    total_bots: botResults.length,
    success_count: successCount,
    fail_count: failCount,
    success_rate: `${Math.round((successCount / botResults.length) * 100)}%`,
  })

  if (failCount > 0) {
    logger.warn('‚ö†Ô∏è –ù–µ –≤—Å–µ –±–æ—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', {
      description: 'Not all bots were successfully initialized',
      fail_count: failCount,
      success_count: successCount,
    })
  }

  if (successCount === 0) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–∏ –æ–¥–∏–Ω –±–æ—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      description: 'Critical error: No bots were initialized',
    })
  }

  return validBots
}
