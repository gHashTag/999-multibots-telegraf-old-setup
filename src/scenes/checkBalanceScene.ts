import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { getUserBalance } from '@/core/supabase'
import {
  sendInsufficientStarsMessage,
  sendBalanceMessage,
  calculateCostInStars,
} from '@/price/helpers'
import { getUserInfo } from '@/handlers/getUserInfo'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
export enum ModeEnum {
  DigitalAvatarBody = 'digital_avatar_body',
  DigitalAvatarBody2 = 'digital_avatar_body_2',
  NeuroPhoto = 'neuro_photo',
  NeuroPhoto2 = 'neuro_photo_2',
  ImageToPrompt = 'image_to_prompt',
  Avatar = 'avatar',
  ChatWithAvatar = 'chat_with_avatar',
  SelectModel = 'select_model',
  Voice = 'voice',
  TextToSpeech = 'text_to_speech',
  ImageToVideo = 'image_to_video',
  TextToVideo = 'text_to_video',
  TextToImage = 'text_to_image',
  LipSync = 'lip_sync',
  VideoInUrl = 'video_in_url',
  AvatarBrain = 'avatar_brain',
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π

export type CostValue = number | ((steps: number) => number)
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
export const modeCosts: Record<ModeEnum, number> = {
  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∫ 0 –¥–ª—è —Ä–µ–∂–∏–º–æ–≤, –≥–¥–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —Å—Ü–µ–Ω–µ
  [ModeEnum.DigitalAvatarBody]: calculateCostInStars(0),
  [ModeEnum.DigitalAvatarBody2]: calculateCostInStars(0),
  [ModeEnum.NeuroPhoto]: calculateCostInStars(0.08),
  [ModeEnum.NeuroPhoto2]: calculateCostInStars(0.08),
  [ModeEnum.ImageToPrompt]: calculateCostInStars(0.03),
  [ModeEnum.Avatar]: 0,
  [ModeEnum.ChatWithAvatar]: calculateCostInStars(0),
  [ModeEnum.SelectModel]: calculateCostInStars(0),
  [ModeEnum.Voice]: calculateCostInStars(0.9),
  [ModeEnum.TextToSpeech]: calculateCostInStars(0.12),
  [ModeEnum.ImageToVideo]: calculateCostInStars(0),
  [ModeEnum.TextToVideo]: calculateCostInStars(0),
  [ModeEnum.TextToImage]: calculateCostInStars(0),
  [ModeEnum.LipSync]: calculateCostInStars(0.9),
  [ModeEnum.VideoInUrl]: calculateCostInStars(0.05),
  [ModeEnum.AvatarBrain]: calculateCostInStars(0),
}

// –ù–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
export const minCost = Math.min(...Object.values(modeCosts))
export const maxCost = Math.max(...Object.values(modeCosts))

export const checkBalanceScene = new Scenes.BaseScene<MyContext>(
  'checkBalanceScene'
)

checkBalanceScene.enter(async ctx => {
  console.log('üíµ CASE: checkBalanceScene')
  const isRu = ctx.from?.language_code === 'ru'
  const { userId } = getUserInfo(ctx)
  const currentBalance = await getUserBalance(userId)
  const mode = ctx.session.mode as ModeEnum
  const cost = modeCosts[mode] || 0 // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
  console.log('‚≠êÔ∏è cost:', cost)
  if (cost !== 0) {
    await sendBalanceMessage(ctx, currentBalance, cost, isRu)
  }

  if (currentBalance < cost) {
    await sendInsufficientStarsMessage(ctx, currentBalance, isRu)
    return ctx.scene.leave()
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  switch (mode) {
    case ModeEnum.DigitalAvatarBody:
      return ctx.scene.enter(ModeEnum.DigitalAvatarBody)
    case ModeEnum.DigitalAvatarBody2:
      return ctx.scene.enter(ModeEnum.DigitalAvatarBody2)
    case ModeEnum.NeuroPhoto:
      return ctx.scene.enter(ModeEnum.NeuroPhoto)
    case ModeEnum.NeuroPhoto2:
      return ctx.scene.enter(ModeEnum.NeuroPhoto2)
    case ModeEnum.ImageToPrompt:
      return ctx.scene.enter(ModeEnum.ImageToPrompt)
    case ModeEnum.Avatar:
      return ctx.scene.enter(ModeEnum.Avatar)
    case ModeEnum.ChatWithAvatar:
      return ctx.scene.enter(ModeEnum.ChatWithAvatar)
    case ModeEnum.SelectModel:
      return ctx.scene.enter(ModeEnum.SelectModel)
    case ModeEnum.Voice:
      return ctx.scene.enter(ModeEnum.Voice)
    case ModeEnum.TextToSpeech:
      return ctx.scene.enter(ModeEnum.TextToSpeech)
    case ModeEnum.ImageToVideo:
      return ctx.scene.enter(ModeEnum.ImageToVideo)
    case ModeEnum.TextToVideo:
      return ctx.scene.enter(ModeEnum.TextToVideo)
    case ModeEnum.TextToImage:
      return ctx.scene.enter(ModeEnum.TextToImage)
    case ModeEnum.LipSync:
      return ctx.scene.enter(ModeEnum.LipSync)
    case ModeEnum.VideoInUrl:
      return ctx.scene.enter(ModeEnum.VideoInUrl)
    case ModeEnum.AvatarBrain:
      return ctx.scene.enter(ModeEnum.AvatarBrain)
    default:
      return ctx.scene.leave()
  }
})
