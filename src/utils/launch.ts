import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'
import express from 'express'

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
const app = express()
const PORT = process.env.PORT || 2999
const BOT_SERVER_URL =
  process.env.ORIGIN || 'https://999-multibots-u14194.vm.elestio.app'
const SECRET_TOKEN_BASE =
  process.env.WEBHOOK_SECRET || 'multibots_webhook_secret'

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä Express –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
 * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä
 */
export const startServer = async (): Promise<boolean> => {
  return new Promise<boolean>(resolve => {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      app.get('/', (req, res) => {
        res.send({
          status: 'ok',
          message: 'Multibots webhook server is running',
          timestamp: new Date().toISOString(),
        })
      })

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
      const server = app.listen(PORT, () => {
        logger.info(`üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
        resolve(true)
      })

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
      server.on('error', error => {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${
            error instanceof Error ? error.message : String(error)
          }`
        )
        resolve(false)
      })
    } catch (error) {
      logger.error(
        `‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
      resolve(false)
    }
  })
}

/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
 */
export const launch = {
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ development —á–µ—Ä–µ–∑ longpolling
   * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
   * @param botId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
   * @returns Promise<boolean> –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
   */
  development: async (
    bot: Telegraf<MyContext>,
    botId: string
  ): Promise<boolean> => {
    try {
      logger.info(
        `üöÄ [${botId}] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling (development)`
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API Telegram –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
      try {
        const me = await bot.telegram.getMe()
        logger.info(
          `‚úÖ [${botId}] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`,
          {
            bot_username: me.username,
            bot_id: me.id,
          }
        )
      } catch (apiError) {
        logger.error(
          `‚ùå [${botId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API: ${
            apiError instanceof Error ? apiError.message : String(apiError)
          }`
        )
        return false
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
      await bot.launch({
        dropPendingUpdates: true,
        allowedUpdates: [
          'message',
          'callback_query',
          'inline_query',
          'my_chat_member',
          'chat_member',
        ],
      })

      logger.info(`‚úÖ [${botId}] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long polling`)

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
      process.once('SIGINT', () => {
        logger.info(`‚èπÔ∏è [${botId}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ SIGINT`)
        bot.stop('SIGINT')
      })
      process.once('SIGTERM', () => {
        logger.info(`‚èπÔ∏è [${botId}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ SIGTERM`)
        bot.stop('SIGTERM')
      })

      return true
    } catch (error) {
      logger.error(
        `‚ùå [${botId}] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
      return false
    }
  },

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ production —á–µ—Ä–µ–∑ webhook
   * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
   * @param botId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
   * @returns Promise<boolean> –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
   */
  production: async (
    bot: Telegraf<MyContext>,
    botId: string
  ): Promise<boolean> => {
    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
      const secretToken = `${SECRET_TOKEN_BASE}_${botId}`

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
      const path = `/webhook/${botId}`
      const webhookUrl = `${BOT_SERVER_URL}${path}`

      logger.info(`üîí [${botId}] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å –∑–∞—â–∏—Ç–æ–π`, {
        webhook_url: webhookUrl,
        has_secret: !!secretToken,
      })

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π webhook –µ—Å–ª–∏ –µ—Å—Ç—å
      try {
        await bot.telegram.deleteWebhook()
        logger.info(`üßπ [${botId}] –ü—Ä–µ–¥—ã–¥—É—â–∏–π webhook —É–¥–∞–ª–µ–Ω`)
      } catch (deleteError) {
        logger.warn(
          `‚ö†Ô∏è [${botId}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π webhook: ${
            deleteError instanceof Error
              ? deleteError.message
              : String(deleteError)
          }`
        )
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      await bot.telegram.setWebhook(webhookUrl, {
        secret_token: secretToken,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const webhookInfo = await bot.telegram.getWebhookInfo()

      logger.info(`‚ÑπÔ∏è [${botId}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:`, {
        url: webhookInfo.url,
        has_custom_certificate: webhookInfo.has_custom_certificate,
        pending_update_count: webhookInfo.pending_update_count,
        last_error_message: webhookInfo.last_error_message || 'No errors',
        last_synchronization_error_date:
          webhookInfo.last_synchronization_error_date || 'N/A',
      })

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const secretLastChars = secretToken.substring(secretToken.length - 4)

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ express middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
      app.use(
        bot.webhookCallback(path, {
          secretToken,
        })
      )

      logger.info(
        `‚úÖ [${botId}] Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${webhookUrl} (—Å–µ–∫—Ä–µ—Ç: ...${secretLastChars})`
      )
      return true
    } catch (error) {
      logger.error(
        `‚ùå [${botId}] –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ${
          error instanceof Error ? error.message : String(error)
        }`
      )
      return false
    }
  },
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º express app –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { app }
