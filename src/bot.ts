import dotenv from 'dotenv'
dotenv.config()

import { Composer } from 'telegraf'
import { MyContext } from '@/interfaces'
import { NODE_ENV } from './config'

import { startServer } from '@/utils/launch'
import { registerCallbackActions } from './handlers/—ÅallbackActions'
import { registerPaymentActions } from './handlers/paymentActions'
import { registerHearsActions } from './handlers/hearsActions'
import { registerCommands } from './registerCommands'
import { setBotCommands } from './setCommands'
import { logger } from './utils/logger'
import { setupErrorHandler } from './helpers/error/errorHandler'
import init from './core/bot'

dotenv.config()

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üìÇ bot.ts –∑–∞–≥—Ä—É–∂–µ–Ω', { NODE_ENV, cwd: process.cwd() })
console.log('üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
  TEST_BOT_NAME: process.env.TEST_BOT_NAME,
  NODE_ENV: process.env.NODE_ENV,
})

export const composer = new Composer<MyContext>()

type NextFunction = (err?: Error) => void

export const createBots = async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ createBots()')
  logger.info('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤', {
    node_env: NODE_ENV,
    cwd: process.cwd(),
    available_env_keys: Object.keys(process.env).filter(key =>
      key.includes('BOT_TOKEN')
    ),
  })

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Express –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
  const serverStarted = await startServer()
  if (!serverStarted) {
    logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Express —Å–µ—Ä–≤–µ—Ä')
    throw new Error('Failed to start Express server')
  }
  logger.info('‚úÖ Express —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

  if (NODE_ENV === 'development' && !process.env.TEST_BOT_NAME) {
    logger.error('‚ùå TEST_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', {
      description: 'TEST_BOT_NAME is not set',
    })
    throw new Error('TEST_BOT_NAME is required for development mode')
  }

  logger.info('üìä –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', { mode: NODE_ENV })

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
  logger.info('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤...')
  const botList = await init()
  logger.info('ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', {
    count: botList.length,
    bot_ids: botList.map(b => b.id),
  })

  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
  const testBotName = process.env.TEST_BOT_NAME
  const activeBots =
    NODE_ENV === 'development'
      ? botList.filter(({ id }) => id === testBotName)
      : botList

  logger.info('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞:', {
    mode: NODE_ENV,
    test_bot_name: testBotName,
    filtered_count: activeBots.length,
    active_bot_ids: activeBots.map(b => b.id),
  })

  if (NODE_ENV === 'development' && activeBots.length === 0) {
    logger.error(
      '‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤',
      {
        description: 'Test bot not found',
        environment: NODE_ENV,
        requested_bot: testBotName,
        available_bots: botList.map(b => b.id),
      }
    )
    throw new Error(`Test bot '${testBotName}' not found`)
  }

  logger.info('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤:', {
    count: activeBots.length,
    bots: activeBots.map(b => b.id),
  })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
  activeBots.forEach(({ bot, id }) => {
    logger.info(`üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞: ${id}`)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    setupErrorHandler(bot)
    logger.info(`‚úÖ [${id}] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`)

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setBotCommands(bot)
    logger.info(`‚úÖ [${id}] –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`)

    registerCommands({ bot, composer })
    logger.info(`‚úÖ [${id}] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã`)

    registerCallbackActions(bot)
    logger.info(`‚úÖ [${id}] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã`)

    registerPaymentActions(bot)
    logger.info(`‚úÖ [${id}] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã`)

    registerHearsActions(bot)
    logger.info(`‚úÖ [${id}] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã`)

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.use((ctx: MyContext, next: NextFunction) => {
      logger.info('üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ/–∫–æ–º–∞–Ω–¥–∞:', {
        description: 'Message/command received',
        text:
          ctx.message && 'text' in ctx.message ? ctx.message.text : undefined,
        from: ctx.from?.id,
        chat: ctx.chat?.id,
        bot: ctx.botInfo?.username,
        update_type: ctx.updateType,
        timestamp: new Date().toISOString(),
      })
      return next()
    })

    logger.info(`‚úÖ [${id}] –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`)
  })

  logger.info('üèÅ –í—Å–µ –±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã!')
}

console.log('üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
createBots()
  .then(() => console.log('‚úÖ –ë–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–æ–≤:', error))
